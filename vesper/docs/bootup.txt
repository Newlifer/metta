On-disk layout:
 Bootloader (Multiboot)
 [kernel image]
 [initramdisk image]

Bootloader:
 - call c++ ctors
 - call kernel
 - [on return from kernel] call c++ dtors
 - halt

kernel:
 - init memory layout
 - init cpu(s) (protection, address translation, exception handlers)
   - prepare gdt and idt tables
 - find out init image location
 - unpack initramdisk to designated location
 - parse image header, find components
 - call components constructors
 - call main component entry point

component constructors:
 - run in kernel mode, have the ability to set up their system tables etcetc
 - usual components in init image include:
   - interrupt dispatcher
   - root memory manager
   - portal manager

main component entry point:
 - kserver is the first nester, that provides base Common Protocols components and boots up
   other (sub-)components such as:
   - scheduler
   - security server
   - object (security) manager



Physical RAM +-------------------------+ Virtual addresses
         top |                         |
             |                         |
             |                         |
    0x20F000 |Libos end address        |
             |                         |
             |                         |
             |...                      |
             |                         |
             |Component3               |
             |                         |
             |                         |
             |...                      |
             |                         |
             |Component2               |
             |                         |
             |                         |
             |...                      |
             |                         |
             |Component1               |
             |[Component index]        |
    0x10F000 |Libos load address       |<-- initial placementAddress
    0x10DDEC |Kernel end address       |
             |[Interrupt handlers]     |
             |[Pagefault handler]      |
             |                         |
             |                         |
             |                         |
             |                         |
(1M)0x100000 |Kernel load address      |
             |                         |
             |                         |
             |                         |
             |                         |
             |                         |
             |                         |
             |                         |
             |                         |
         0x0 +-------------------------+

