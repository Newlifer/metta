#!/usr/bin/env python

import os, Task, Options, Configure
Configure.autoconfig = 1

# FIXME: Could use bzr python modules, too.
VERSION = os.popen("bzr version-info|grep revno|cut -d' ' -f2").read().strip()
APPNAME = 'vesper'

srcdir = '.'
blddir = '_build_'

source_dirs  = '. lib memory pd schedule boot'
include_dirs = '. lib/klibc lib/bstrlib lib memory pd schedule boot lib/oskit arch/x86 lib/oskit/oskit/x86' #FIXME: archdep
cflags = '-Wall -Wextra -Werror'
cflags += ' -Os' #FIXME: builddep FIXME: -O3 often causes screwups
osflags = '-nostdlib -nostartfiles -nodefaultlibs -fno-builtin '
flags = '-fno-stack-protector -fno-leading-underscore'

def set_options(opt):
    opt.add_option("--platform", action="store", default="x86", help="Select platform to build for.")

def configure(conf):
    # Configure for given platform
    # Configuration name is composed of platform, cpu, release


    conf.check_tool('gcc g++ nasm') # FIXME: gcc detection per-config for x-compile?

    # Set up common environment variables
    conf.env.append_unique('CCFLAGS', cflags + ' ' + flags)
    conf.env.append_unique('CXXFLAGS', cflags + ' ' + flags)
    conf.env.append_unique('CXXDEFINES', ['CONFIG_CPU_IA32_P4'])
    conf.env.append_unique('CXXDEFINES', ['BSTRLIB_CANNOT_USE_STL', 'BSTRLIB_CANNOT_USE_IOSTREAM', 'BSTRLIB_DOESNT_THROW_EXCEPTIONS', 'BSTRLIB_DONT_USE_VIRTUAL_DESTRUCTOR', 'BSTRLIB_DONT_ASSUME_NAMESPACE'])
    conf.env.append_unique('NASM_FLAGS', '-f elf')

    env = conf.env.copy() # Clone environment
    env.set_variant('x86-tests-release') # configure archdep & builddep variant
    conf.set_env_name('x86-tests-release', env)
    env = conf.env.copy() # Clone environment
    env.set_variant('x86-release') # configure archdep & builddep variant
    conf.set_env_name('x86-release', env)

    # Config for running tests
    conf.setenv('x86-tests-release') # Activate the environment
    conf.env['LIB_TEST']      = 'boost_unit_test_framework'
    conf.env.append_unique('CXXFLAGS', '-fexceptions')
    conf.env.append_unique('CXXDEFINES', ['UNIT_TESTS'])

    # Config for building kernel on x86
    conf.setenv('x86-release') # Activate the environment
    conf.env.append_unique('CCFLAGS', osflags)
    conf.env.append_unique('CXXFLAGS', '-fno-rtti -fno-exceptions ' + osflags)
    conf.env.append_unique('CXXDEFINES', ['BOCHS_IO_HACKS']) # debugging hacks for bochs
    conf.env.append_unique('LINKFLAGS', '-T ../linker.ld ' + osflags + flags)

    # Generate config.h
    conf.define('CONFIG_INLINING', 1)
    conf.write_config_header('config.h')

updater = Task.simple_task_type('update_image', './update_image.sh', color='BLUE')

def build(bld):
    bld.add_subdirs('lib/klibc lib/bstrlib lib/atomic_ops/src tests')

    vesper = bld.new_task_gen('cxx', 'program')
    vesper.find_sources_in_dirs(source_dirs)
    vesper.source.remove('boot/boot.asm')
    vesper.includes = include_dirs
    vesper.uselib_local = 'klibc bstrlib'
    vesper.target = 'vesper'
