#!/usr/bin/env python

VERSION = '0.0.2'
APPNAME = 'vesper'

import Task, Options, Configure
Configure.autoconfig = 1

srcdir = '.'
blddir = 'build'
source_dirs  = '. lib memory pd schedule boot'
include_dirs = '. lib/klibc lib/bstrlib lib memory pd schedule boot lib/oskit arch/x86 lib/oskit/oskit/x86' #FIXME: archdep
cflags = '-Wall -Wextra -Werror'
cflags += ' -O3' #FIXME: builddep
flags = '-nostdlib -nostartfiles -nodefaultlibs -fno-builtin -fno-stack-protector -fno-leading-underscore'

def set_options(opt):
	opt.add_option("--platform", action="store", default="x86", help="Select platform to build for.")

def configure(conf):
	# Configure for given platform
	# Configuration name is composed of platform, cpu, release


	conf.check_tool('gcc g++ nasm') # FIXME: gcc detection per-config for x-compile?

	env = conf.env.copy() # Clone environment
	env.set_variant('x86-tests-release') # configure archdep & builddep variant
	conf.set_env_name('x86-tests-release', env)
	env = conf.env.copy() # Clone environment
	env.set_variant('x86-release') # configure archdep & builddep variant
	conf.set_env_name('x86-release', env)

	# Config for running tests
	conf.setenv('x86-tests-release') # Activate the environment

	conf.env.append_unique('CCFLAGS', cflags + ' ' + flags)
	conf.env.append_unique('CXXFLAGS', cflags + ' -fexceptions ' + flags)
	conf.env.append_unique('CXXDEFINES', ['CONFIG_CPU_IA32_P4', 'UNIT_TESTS'])
	conf.env.append_unique('CXXDEFINES', ['UNIT_TESTS'])
	conf.env.append_unique('CXXDEFINES', ['BSTRLIB_CANNOT_USE_STL', 'BSTRLIB_CANNOT_USE_IOSTREAM', 'BSTRLIB_DOESNT_THROW_EXCEPTIONS', 'BSTRLIB_DONT_USE_VIRTUAL_DESTRUCTOR', 'BSTRLIB_DONT_ASSUME_NAMESPACE'])
	conf.env.append_unique('NASM_FLAGS', '-f elf')
	conf.env.append_unique('LDFLAGS', '-lboost_unit_test_framework')

	# Config for building kernel on x86
	conf.setenv('x86-release') # Activate the environment

	conf.env.append_unique('CCFLAGS', cflags + ' ' + flags)
	conf.env.append_unique('CXXFLAGS', cflags + ' -fno-rtti -fno-exceptions ' + flags)
	conf.env.append_unique('CXXDEFINES', ['CONFIG_CPU_IA32_P4']) #FIXME: archdep
	conf.env.append_unique('CXXDEFINES', ['BSTRLIB_CANNOT_USE_STL', 'BSTRLIB_CANNOT_USE_IOSTREAM', 'BSTRLIB_DOESNT_THROW_EXCEPTIONS', 'BSTRLIB_DONT_USE_VIRTUAL_DESTRUCTOR', 'BSTRLIB_DONT_ASSUME_NAMESPACE'])
	conf.env.append_unique('LINKFLAGS', '-T ../linker.ld ' + flags)
	conf.env.append_unique('NASM_FLAGS', '-f elf')

	conf.write_config_header('config.h')

updater = Task.simple_task_type('update_image', './update_image.sh', color='BLUE')

def build(bld):
	klibc = bld.new_task_gen('cxx', 'staticlib')
	klibc.find_sources_in_dirs('lib/klibc')
	klibc.includes = 'lib/bstrlib lib/klibc lib'
	klibc.env = bld.env_of_name('x86-release').copy() # TODO
	klibc.target = 'klibc'

	bstrlib = bld.new_task_gen('cxx', 'staticlib')
	bstrlib.find_sources_in_dirs('lib/bstrlib')
	# Remove testfiles from library
	bstrlib.source.remove('lib/bstrlib/cpptest.cpp')
	bstrlib.source.remove('lib/bstrlib/test.cpp')
	bstrlib.source.remove('lib/bstrlib/bstest.c')
	bstrlib.source.remove('lib/bstrlib/testaux.c')
	bstrlib.includes = 'lib/bstrlib lib/klibc lib'
	bstrlib.env = bld.env_of_name('x86-release').copy() # TODO
	bstrlib.env.append_unique('CXXFLAGS', '-Wno-strict-overflow')
	bstrlib.target = 'bstrlib'

	#bld.add_subdir('lib/bstrlib/test')

	vesper = bld.new_task_gen('cxx', 'program')
	vesper.find_sources_in_dirs(source_dirs)
	vesper.source.remove('boot/boot.asm')
	vesper.includes = include_dirs
	vesper.env = bld.env_of_name('x86-release').copy() # TODO: pass in env name from cmdline
	vesper.uselib_local = 'klibc bstrlib'
	vesper.target = 'vesper'

	#update = updater(bld.env_of_name('x86-release').copy())
	#update.inputs = [vesper.target]
	#update.outputs = [update.env.find_resource('floppy.img')]

	tests = bld.new_task_gen('cxx', 'program')
	tests.find_sources_in_dirs('tests')
	tests.includes = include_dirs
	tests.env = bld.env_of_name('x86-tests-release').copy() # TODO
	tests.target = 'run-tests'
