#!/usr/bin/env python

import Configure
Configure.autoconfig = 1

srcdir = '.'
blddir = 'build'

def set_options(opt):
	pass

def configure(conf):
	conf.check_tool('gcc g++ nasm') # FIXME: gcc detection per-config for x-compile?
	cflags = '-Wall -Wextra -Werror -I../lib -I../memory -I../pd -I../schedule -I../boot'
	flags = '-nostdlib -nostartfiles -nodefaultlibs -fno-builtin -fno-stack-protector -fno-leading-underscore'

	cflags += ' -I../arch/x86' #FIXME: archdep
	cflags += ' -O3' #FIXME: builddep

	env = conf.env.copy() # Clone environment
	env.set_variant('x86-tests-release') # configure archdep & builddep variant
	conf.set_env_name('x86-tests-release', env)
	env = conf.env.copy() # Clone environment
	env.set_variant('x86-release') # configure archdep & builddep variant
	conf.set_env_name('x86-release', env)

	# Config for running tests
	conf.setenv('x86-tests-release') # Activate the environment

	conf.env.append_unique('CCFLAGS', cflags + ' ' + flags)
	conf.env.append_unique('CXXFLAGS', cflags + ' -fexceptions ' + flags)
	conf.env.append_unique('CXXDEFINES', ['CONFIG_CPU_IA32_P4', 'UNIT_TESTS'])
	conf.env.append_unique('CXXDEFINES', ['UNIT_TESTS'])
	conf.env.append_unique('NASM_FLAGS', '-f elf')
	conf.env.append_unique('LDFLAGS', '-lboost_unit_test_framework')

	# Config for building kernel on x86
	conf.setenv('x86-release') # Activate the environment

	conf.env.append_unique('CCFLAGS', cflags + ' ' + flags)
	conf.env.append_unique('CXXFLAGS', cflags + ' -fno-rtti -fno-exceptions ' + flags)
	conf.env.append_unique('CXXDEFINES', ['CONFIG_CPU_IA32_P4']) #FIXME: archdep
	conf.env.append_unique('LINKFLAGS', '-T ../linker.ld ' + flags)
	conf.env.append_unique('NASM_FLAGS', '-f elf')

	conf.write_config_header('config.h')

def build(bld):
	obj = bld.new_task_gen('cxx', 'program')
	obj.find_sources_in_dirs('. boot lib memory pd schedule')
	obj.source.remove('boot/boot.asm')
	obj.env = bld.env_of_name('x86-release').copy() # TODO: pass in env name from cmdline
	obj.target = 'vesper'

	tests = bld.new_task_gen('cxx', 'program')
	tests.find_sources_in_dirs('tests')
	tests.env = bld.env_of_name('x86-tests-release').copy() # TODO
	tests.target = 'run-tests'
