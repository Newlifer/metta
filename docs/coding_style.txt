===================================================================================================
0. Preface
===================================================================================================

This document describes coding conventions used in Metta, be sure to comply to these guidelines
to make merging easier.

This document is based on work by
    Scott Wheeler
    Stanislav Karchebny
    Frank Osterfeld
    Ludvig Borgne

All sections are numbered to make referencing them easier, for example 1a describes the format of
identifier names.

System style is snake_names_like_this.

===================================================================================================
1. Names
===================================================================================================

The following guidelines deal with naming of types, attributes, variables, constants, functions,
namespaces etc:

a. The following names shall be in lowercase system style:
    * Types
    * Named constants
    * Enum values
    * Namespaces
    * Methods and functions
    * Attributes
    * Variables

b. The following names should be in uppercase system style:
    * Defined preprocessor macro names
    * Defined constant names

c. Names of template parameters shall be single uppercase letters or system style lowercase
   identifiers.
   In complex STL-like code with many typedefs it is allowed to name template parameters
   in CamelCase.

d. Names of methods and functions shall start with a verb.

    format_string();
    process_data();

e. Accessors shall begin with "set" for setters and no prefix for getters.

    int length();
    void set_length(int new_length);

    If internal property name is the same as accessor function name, property name shall have
    underscore appended.

    int length_;

f. Plural form shall be used for names representing a collection of objects.

    list_t<rectangle_t> rectangles;
    int points[n_points];

g. Avoid long variable names in code blocks. When code is sufficiently concise variable meaning
   should be obvious.
   Do not save on instance and class variable names though, these are visible throughout the class
   and serve documentary purposes.

h. Boolean variables and methods (including accessors) shall use suitable prefixes,
   such as "is", "has" or "can".

    bool is_open;
    bool has_subject(email& mail);
    bool can_update();

i. Types have _t suffix (some types inside namespaces can omit it, but rarely).

    typedef int sint32_t;
    class kernel_t;

   Note: this clashes with POSIX norm for system types, but we use it anyway as it is more clear
   and for C++ usually hidden inside a namespace.

j. Namespaces nesting should not be abundant. Typically a single level flat namespace
   is more than enough to group classes together.

k. Sometimes namespaces can be plural nouns or adjectives, indicating grouping
   classes by attribute.

l. Needless to say, all names shall be in English.


===================================================================================================
2. Files
===================================================================================================

The following guidelines deal with the naming, contents and structure of source code
and header files:

a. C++ header files shall have the extension ".h",
   and C++ source files shall have the extension ".cpp".

b. A class shall be declared in a header file and defined in a source file,
   where the names of the files match the name of the class.
   Except in the case of templated classes, where method bodies should be defined
   within the same header file, preferably outside of the class declaration,
   unless they are very short.

c. All definitions, except inline functions, shall reside in source files.

d. The order of definitions in the source file shall be the same as the order
   of the corresponding declarations in the header file.
   Unless otherwise required by interdependencies.

e. Line length shall be kept within 100 columns, whenever feasilble.

f. Lines longer than 100 columns shall be split in a way that makes the line readable,
   e.g. by breaking after a comma or an operator, and aligning the new line with the beginning
   of the expression on the previous line.

g. Header files shall contain an include guard.

   Do not use #define-based include guards like these:

    #ifndef __MEMORY_H
    #define __MEMORY_H
    // .....
    #endif

   Use #pragma instead:

    #pragma once

h. #include directives shall be located at the top of the file, after the header.
   Header files shall be included in the following order:
   1. standard headers,
   2. third-party headers,
   3. local headers.
   This prevents local include conflicts with global files
   and allows to redefine standard behavior.

   #include <string>
   #include <boost/lexical_cast.hpp>
   #include "my_local_class.h"

i. In header files, prefer forward declarations for classes defined in the current package, but
   use includes for system types like iostream or string. Their forward declarations may be
   system-dependent.


===================================================================================================
3. Layout
===================================================================================================

The following guidelines deal with indentation and use of whitespace:

a. Spaces shall always be used instead of tabs.

b. The basic indentation step is 4 spaces.

c. Block bodies, case statements within a switch are indented.
   Class bodies are indented, however access modifiers "public", "protected" and "private" are not.

    switch (arg)
    {
        case 0:
            debug() << "zero!";
            break;

        case 1:
        {
            //  big block with some local vars
            int local_var = 0;
            break;
        }
    }

    class my_type_t
    {
        int v_;

    public:
        inline int v() const {
            return v_;
        }
    };

d. Namespaces are not indented except when in forward declarations
   (where they indent as block bodies).
   Comment the closing bracket of the namespace foo with // foo namespace

    namespace my_namespace
    {
        class regexp;
    }

    namespace example
    {

    class foo_t
    {
    public:
        foo_t();
    };

    } // example namespace

e. Opening braces are on their own line, except for enumerations
   and blocks defined in a single line.

    enum some_enum_e { value1, value2, value3 };

    if (x > y) {
        y += 5;
    }

    if (x > y)
    {
        x -= 5;
        y += 5;
    }

    while (foo == bar &&
        baz == quux &&
        flop == pop)
    {
        // stuff
    }

    Inline accessor functions follow the same rules - egyptian braces if body is only one line,
    regular braces otherwise.
    Do not put single-line bodies of inline functions on the same line as function declaration,
    always use egyptian style.

    class test_t
    {
        inline void do_something() {
            yippie();
        }

        inline void do_something_else()
        {
            // time to do something else here
            yippie2();
        }
    };

f. Multiple statements should not ever be combined onto one line.

g. Block statements such as "if", "for", "foreach", "do...while" and "while" shall
   always have brackets around their blocks. "for" statements with empty bodies should be avoided.

h. The condition in an "if" statement shall always be put on a separate line.

    if (x == 5) {
        y = x;
    }

i. C++ pointers and references shall have their reference symbol next to the type
   rather than to the name.

    float* x;
    some_class_t& object;

j. C++ const specifiers should be placed between type name and reference symbol.

    int const v;
    int const* vp;
    int const* const vpp;
    some_class_t& const glued_reference_to_object;

   Why? See discussion here http://stackoverflow.com/questions/5503352/const-before-or-const-after
   In short: const applies to the thing on the left of it.

k. In class declarations, "public" declarations shall precede "protected" declarations
   which in turn shall precede "private" declarations. In many cases "private" declarations may
   precede all other declarations without specifying "private" (using default class access).

   The organization of the members in a class declaration should be roughly as follows:

    private typedefs:      ------+--> used throughout the class
    public typedefs:       ------\
    public ctors/dtors:          |
    public methods:              |
    public slots:                +--> part of the class API
    signals:                     |
    protected slots:             |
    private slots:         ------/
    protected methods:     ------\
    private methods:             |
    private ctors/dtors:         +--> class implementation details
    protected attributes:        |
    private attributes:    ------/

   Methods and attributes should be clearly separated.

l. Virtual functions should always be marked as 'override' in derived classes.

m. In a function definition, the function return type shall be put above
   the function name (not to the left of it).

    some_type_t
    some_function(some_other_type_t& object)
    {
        // ...
    }

n. In a template function definition, the function template arguments shall be put
   to the line above function signature. They can span multiple lines with additional indent.

    template <typename T, int N>
    some_type_t
    some_function(some_other_type_t& object)
    {
        // ...
    }

    template <typename RidiculouslyLongTypeName,
        int N = 500>
    some_type_t
    some_function(some_other_type_t& object)
    {
        // ...
    }

o. The following items shall be surrounded by a space character:
    * Conventional operators,
    * Curly braces used in single-lined enum declarations,
    * Curly braces used in single-lined inline function definitions.

    a = 5 + (3 * x) / 2;

p. The following items shall be followed by a space character:
    * C++ reserved words,
    * Commas,
    * Semicolons in "for" statements.

    for (x = 0; x < 10; ++x, y += x) {
        do_something(x, y, 0);
    }

q. Function names, operator names in declarations and definitions,
   various C++ casts operators should not be followed by a space character.

    static_cast<void*>(var)
    operator uint32_t();
    operator =(int new_value);

r. Opening parentheses shall not be followed by white space.
   Closing parentheses shall not be preceded by white space.

s. Logical units within a block shall be separated by one blank line,
   and each block shall start with a comment if it is unclear what the block does.

t. Function definitions shall be separated by two blank lines.

u. Initialization in constructors is one assignment per line, indented,
   with colon or comma before the assignment.
   This allows for easier rearrangement if class layout changes.

    object_t::object_t(int a, double b, other_t& c)
        : parent_t()
        , int_value(a)
        , double_value(b)
        , reference(c)
    {
        // other initialization
    }

v. Variables in declaration blocks and their initialization can be justified to the left
   to enhance readability.

    int     long_variable_name = 0;
    double  avoid_long_names   = 1.1;
    bool    long_names         = true;

w. Files usually include at the top licensing header from file license_header.
   Ruby script apply_boilerplate.rb can be used to add it to new files.


===================================================================================================
4. Documentation
===================================================================================================

The following guidelines deal with comments and documentation of the code:

a. All comments shall be written in English.

b. Use "//" for single-line text comments, and "//" or "/* */" for multi-line text comments.
   "#if 0 ... #endif" preprocessor directives can be used to temporarily disable code without
   erasing it. Eventually, such code shall be removed, though.

c. Classes, functions and methods shall be documented using simple Doxygen comments
   where they are declared. This means functions in public API will carry their own documentation
   in the header files. Internal documentation can be appended by writing it in the source file.

   Doxygen comments shall include a brief description of the method/attribute, and may also contain
   a detailed description, if that is considered necessary.

    /**
     * A brief description of the function, normally on one line until colon.
     * An optional detailed description,
     * normally on several lines.
     */
    void my_function(int x)
    {
        // ...
    }

d. For inline functions, defined on a single line in the header file,
   a brief description just above the definition is enough.

    /// A brief description of the function.
    void my_inline_function(int x) {
        a = x;
    }

e. For structs, enums and attributes, a brief description is enough.
   Enum values and attributes may be documented after the value.

    /// Type of line used for drawing.
    enum line_type
    {
        no_line,     /**< No line at all.           */
        thin_line,   /**< Thin line (1-3 pixels).   */
        thick_line,  /**< Thick line (3-9 pixels).  */
    };


===================================================================================================
5. An example
===================================================================================================


test.h:

//
// Copyright 2007 - 2012, Stanislav Karchebnyy <berkus+metta@madfire.net>
//
// Distributed under the Boost Software License, Version 1.0.
// (See file LICENSE_1_0.txt or a copy at http://www.boost.org/LICENSE_1_0.txt)
//
#pragma once

#include <map>
#include <string>
#include <sysinclude2.h>
#include <extinclude1.h>
#include <extinclude2.h>
#include "localinclude1.h"
#include "anotherlocalinclude.h"

namespace example {

class something_t;

/**
 * This is an example test object.
 * More detailed description of what this class does.
 */
class test_t : public object_t
{
public:
    /// Shorthand type for list of test objects.
    typedef value_list<test_t> list;

    /// Obtain a singleton instance of test class.
    static test_t* instance() { // singleton/factory methods go in constructors place
        return instance_;
    }

    virtual ~test_t();

    void perform_func();
    void apply_func2(something_t* sth);

    // accessors
    int private_var() const {
        return private_var_;
    }
    void set_private_var(int new_v) {
        private_var_ = new_v;
    }

public slots:
    void receive(something_t&);

signals:
    void send(something_t&);

// Protected and private stuff is usually documented in the implementation file.
protected:
    void some_protected_func() override;
    static void some_protected_static_func();

protected slots:
    void protected_slot();

protected:
    int protected_attr;

private:
    test_t();
    test_t(string_t some_string);

    int private_method();
    static int static_private_method();

private slots:
    void private_slot(int param_pam_pam);

private:
    int private_var_;
    something_t* tasty_thingie;

    static test_t* instance_;
};

} // example namespace


test.cpp:

//
// Copyright 2007 - 2009, Stanislav Karchebnyy <berkus+metta@madfire.net>
//
// Distributed under the Boost Software License, Version 1.0.
// (See file LICENSE_1_0.txt or a copy at http://www.boost.org/LICENSE_1_0.txt)
//
#include "test.h" // per Lakos' "Large scale C++ design" component header file is included first.
#include <sysinclude3.h>
#include <extinclude3.h>
#include "localinclude2.h"

namespace example
{

test_t* test_t::instance_ = 0;


test_t::test_t()
    : object_t()
    , protected_attr(0)
    , private_var_(0)
    , tasty_thingie(0)
{
}


test_t::test_t(string_t some_string)
    : object_t()
    , protected_attr(0)
    , private_var_(0)
    , tasty_thingie(from_string(some_string))
{
    if (!tasty_thingie) {
        debug() << "from_string failed";
    }
}


void
test_t::apply_func2(something_t* sth)
{
    for (int x = 0; x < 10; x++)
    {
        if (x == 5) {
            send(*sth);
        }
    }
}

} // example namespace

===================================================================================================

