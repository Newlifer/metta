* Add bootimage namespace iteration (bootimage_t::namespace_t::iterator?)

* Finish introspection and write a command line tool to interactively explore type system.

* Make a real module loader with all tables and proper memory allocation - current one seems to step over already allocated data and needs to preload things in order to work...

* Make a memory map tool to see what is allocated where, associate stretches and domains with allocated frames.

* Assocfs:
  - OS block cache - write tests.
  - write b+tree handler

* write more unit-tests for all these modules!

* We need a simple application to start coding from the user perspective.
  Something simple, single focused and immensely mettaish. Ideas?

* Create architecture descriptions in increasing level of detail (@sa ANSA engineering overview).

-----------------------------------------------------------------------------------------------------------------------

* System components:
  scheduler
  protection domains
  memory manager √
  usermode √

  UP √
  SMP
  NUMA

* Nucleus (privileged core) - TODO: cleanly separate this code into a specialized component
  IRQ stubs
  privileged instructions
  limited set of syscalls for performing privileged instructions - @TODO: make a list now
  - write_pdbr √

* Drivers
  keyboard (PS/2, usb support needs more drivers)
  PCI
  ACPI (using acpica port?)
  display
  network

* Services
  typesystem √
  events
  IDC
  - shm transport
  - marshalling & stub generator
  - events plumbing between domains
  - exports table & lookup
  exceptions √

* Applications
  test shell
  child
  memory inspector
  symbolic debugger

