Module loader:
 ☐ Implement separating code, data and bss sections into different privileged stretches.
 ☐ Implement module dependency tracking
        Implement dependency tracking via MODULE_DEPEND() macros, .modinfo section data and module dependency graph building in module loader.
        The actual dependency information should be generated by meddler from interface info and then somehow combined into final dependency record.
        Also can generate depsgraph based on symbols resolution between modules marked for loading.
 ☐ Implement symbol resolution from already loaded modules.
 ☐ stuff like console and debug logger should be loadable modules so that other components link to the shared instance.
 ☐ can be instantiated early in kickstart and entered into pervasives? PVS(logger), PVS(console) e.g.

Cleanups:
 ☐ move types__intf_typeinfo to types::intf_typeinfo etc because of namespace linking issues
 ☐ all non-pub types should be inside namespace types { namespace { } } perhaps

Boot:
 ☐ Clean up the C-like code from Nemesis and turn it into robust shared kernel components with dynamic loading/resolution
 ☐ Add bootimage namespace iteration (bootimage_t::namespace_t::iterator?)
 ☐ Finish introspection and write a command line tool to interactively explore type system.
 ☐ Make a real module loader with all tables and proper memory allocation - current one seems to step over already allocated data and needs to preload things in order to work...
 ☐ Make a memory map tool to see what is allocated where, associate stretches and domains with allocated frames.
     - display it at runtime at the bottom of the screen ...
 ☐ Add generic types a-la C# to type system?

Build:
 ☐ Dependency Problem during build: changing an interface that is a base for other interfaces does not trigger rebuild of these interfaces (implicit dependency information is missing from the build system...)
 ✔ Dependency Problem during build: missing dependency of init.img on built components, so 'ninja metta' will not rebuild the iso image when necessary. @done (13-06-29 12:33)

General:
 ☐ Retarget to x86_64 and UEFI
    - by the time i'm getting to arm there will be armv8 chips everywhere anyway.

Assocfs:
  ☐ OS block cache - write tests.
  ☐ write b+tree handler
  ☐ write more unit-tests for all these modules!
  ☐ We need a simple application to start coding from the user perspective. Something simple, single focused and immensely mettaish. Ideas?
  ☐ Create architecture descriptions in increasing level of detail (@sa ANSA engineering overview).

System components:
  ☐ scheduler
  ☐ protection domains
  ✔ memory manager @done (12-12-31 16:58)
  ✔ usermode @done (12-12-31 16:58)

  ✔ UP @done (12-12-31 16:58)
  ☐ SMP
  * SMP - may require serious redesign
  ☐ NUMA
  * NUMA-style CPU addressing
  ☐ ARM port
  ☐ Hosted port

Nucleus (privileged core):
 TODO: cleanly separate this code into a specialized component
  ☐ IRQ stubs
  ☐ privileged instructions
  ☐ limited set of syscalls for performing privileged instructions - @TODO: make a list now
  * syscall/sysret, sysenter/sysexit in addition to current "int 99"
  ✔ write_pdbr @done (12-12-31 16:59)

Drivers:
  ☐ keyboard (PS/2, usb support needs more drivers)
  ☐ PCI
    ✔ PCI bus enumeration (enumeration works, not optimal) @done (13-06-03 10:09)
    ☐ assigning PCI irqs and handlers
  ☐ ACPI (using acpica port?)
  ☐ Device driver infra
  ☐ APIC
  ☐ IO APIC
  ☐ x2APIC
  ☐ display
    ✔ BGA driver @done (13-05-28 18:09)
   ☐ Intel GMA driver (http://www.x.org/docs/intel/)
  ☐ network
    ✔ ne2000 driver @done (13-05-28 18:09)

  * Scan pcibus
    * This needs access interface
  * Find netdev
  * Start netdev driver
    * needs irq assignment
    * needs irq handler installation
  * Send and receive packets
    * needs io fbufs
    * needs synchro events
    * needs client QoS
  * Use ipv6 packets
    * needs network stacking/layering

  ☐ PC keyboard driver
  ☐ USB bus

Services:
  ✔ typesystem @done (12-12-31 16:59)
  ☐ events
  ☐ IDC
     ☐ shm transport
     ☐ marshalling & stub generator
     ☐ events plumbing between domains
     ☐ exports table & lookup
  ✔ exceptions @done (12-12-31 16:59)

Applications:
  ☐ test shell
  ☐ child
  ☐ memory inspector
  ☐ symbolic debugger
  ☐ Write tests for atomic_count

Other:
    ☐ Investigate TLSF memory allocator for RT tasks 
        Investigate possible use of TLSF for RT tasks. See http://rtportal.upv.es/rtmalloc/
    ☐ Implement device tree support
        Perform scanning of the system buses and build a device tree which describes machine configuration.
        A prerequisite for device driver loading and probing.
        Device tree can be represented as a naming_context, mapping various information about devices from arc-names.

Toolchain:
  ☐ Jotun native file format work
  ☐ Migrate linking to gold with LLVM plugin
        One issue with gold was problem with not generating the GOT properly. There's a testcase for this exists and can be used in configuring proper gold setup.
        Another option is to try and build ELF lld with llvm. It sure is very limited at the moment.
        - lld built, try it out!
 ☐ gold doesn't build _GLOBAL_OFFSET_TABLE_ for some reason, reproducible case made.
 ☐ try to make lld json link scripts? - this will let scratch binutils

Baby steps:
    ☐ Port activations and handlers framework
    ☐ Port gatekeeper
    ☐ Port VCPU operations
    ☐ Implement nucleus syscalls
    ☐ Set up module namespaces tree and global context
    ☐ Port threading packages
        Threads, thread handlers, events, user-level scheduler package.
    ☐ Port IDC machinery
        IDC stubs, marshal, CS IDC stubs, IDC/Shm Transports.
    ☐ Port binder
        Binder, exports table, plumber, event channels.
    ✔ Finish porting naming context operations @done (12-12-31 17:09)
    ☐ Port domain manager

Meddler:
    ☐ Generate dot files with dependency information in meddler
    ☐ Use llvm doxygen scanning functionality
    ☐ Meddler: use newline as a substitute for semicolon where possible

Milestone-1:
    ☐ Start a root thread
       Start and run a single kernel thread in kernel address space with kernel (user?) privileges.

Another realistic scenario more on the HID side:
  * make a simple cli: type in an arcname and it will try to look it up and print out formatted according to the type
    * this needs events, contexts etc all running...
  * needs keyboard HID driver (PS2 or USB)
    * for USB a huge pile of protocol handling must be implemented

Testing:
    ☐ Devise a testing framework for modules

