#!/usr/bin/env python
# -*- coding: utf-8 -*-

import os, Task, Options, Configure, Utils, misc
Configure.autoconfig = 1

# FIXME: Could use bzr python modules, too.
VERSION = os.popen("bzr version-info|grep revno|cut -d' ' -f2").read().strip()
APPNAME = 'vesper'

srcdir = '.'
blddir = '_build_'

source_dirs  = 'boot initcp vesper'.split()
include_dirs = 'boot initcp vesper lib runtime vesper/memory vesper/pd'.split()
archdep_includes = 'arch/ lib/oskit/oskit/'.split()

cflags = '-Wall -Wextra -Werror'.split()
cflags += ['-Os'] #FIXME: builddep FIXME: -O3 often causes screwups
cxxflags = cflags + ['-std=gnu++0x']
osflags = '-nostdlib -nostartfiles -nodefaultlibs'.split() # -fno-builtin
flags = '-fno-stack-protector -fno-leading-underscore'.split()

def set_options(opt):
    opt.add_option("--arch", action="store", default="x86", help="Select architecture to build for.")

def configure(conf):
    # Configure for given platform
    # Configuration name is composed of architecture, cpu, release
    arch = Options.options.arch

    conf.check_tool('gcc g++ nasm misc') # FIXME: gcc detection per-config for x-compile?

    # Set up common environment variables
    conf.env.append_unique('CCFLAGS', cflags + flags)
    conf.env.append_unique('CXXFLAGS', cxxflags + flags)
    #conf.env.append_unique('CXXDEFINES', ['CONFIG_CPU_IA32_P4'])
    conf.env.append_unique('NASM_FLAGS', ['-f elf'])

    # Mhm, any better way to define this?
    conf.env['ENV'] = arch + '-release'
    conf.env['TEST_ENV'] = arch + '-tests-release'

    env = conf.env.copy() # Clone environment
    env.set_variant(conf.env['TEST_ENV'])
    conf.set_env_name(conf.env['TEST_ENV'], env)
    env = conf.env.copy() # Clone environment
    env.set_variant(conf.env['ENV'])
    conf.set_env_name(conf.env['ENV'], env)

    # Config for running tests
    conf.setenv(conf.env['TEST_ENV']) # Activate the environment
    conf.env['LIB_TEST']      = 'boost_unit_test_framework'
    conf.env.append_unique('CXXFLAGS', ['-fexceptions'])
    conf.env.append_unique('CXXDEFINES', ['UNIT_TESTS'])

    # Config for building kernel
    conf.setenv(conf.env['ENV']) # Activate the environment
    conf.env.append_unique('CCFLAGS', osflags)
    conf.env.append_unique('CXXFLAGS', '-fno-rtti -fno-exceptions -std=gnu++0x'.split() + osflags)
    conf.env.append_unique('CXXDEFINES', ['BOCHS_IO_HACKS']) # debugging hacks for bochs
    conf.env.append_unique('LINKFLAGS', ['--gc-sections'] + osflags + flags)

    # Set arch-specific include paths
    conf.env.append_unique('INCLUDE_ARCH', map(lambda d: d + arch, archdep_includes))

    # Generate config.h (per-environment!)
    conf.define('ARCH', arch)
    conf.define('CONFIG_INLINING', 1)
    conf.define('HEAP_DEBUG', 1)
    conf.write_config_header('config.h')

def build(bld):
    loader = bld.new_task_gen('cxx', 'program')
    loader.source = 'boot/loader.s boot/unpacker.cpp boot/multiboot.cpp lib/default_console.cpp runtime/g++support.cpp runtime/memutils.cpp lib/panic.cpp lib/elf_parser.cpp'
    loader.env = bld.env_of_name(bld.env['ENV']).copy()
    loader.env.append_unique('LINKFLAGS', ['-T', '../boot/loader.ld', '-Wl,-Map,bootloader.map'])
    loader.includes = include_dirs + loader.env['INCLUDE_ARCH']
    loader.target = 'bootloader'

    initcp = bld.new_task_gen('cxx', 'program')
    initcp.source = 'initcp/initcp.cpp boot/multiboot.cpp lib/default_console.cpp runtime/g++support.cpp runtime/memutils.cpp lib/panic.cpp'
    initcp.env = bld.env_of_name(bld.env['ENV']).copy()
    initcp.env.append_unique('LINKFLAGS', ['-T', '../initcp/initcp.ld', '-Wl,-Map,initcomp.map'])
    initcp.includes = include_dirs + initcp.env['INCLUDE_ARCH']
    initcp.target = 'initcomp'

    #bld.add_subdirs('tests')

def shutdown():
    Utils.exec_command("sh ./update_image.sh")
    #updater = bld.new_task_gen('command-output', outputs='floppy.img', argv=[vesper.target])
    #updater.command = 'sh update_image.sh'
    #updater.command_is_external = True
    #updater.dependencies = [vesper]

# kate: indent-width 4; replace-tabs on;
# vim: set et sw=4 ts=4 sts=4 cino=(4 :
