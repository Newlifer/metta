#!/usr/bin/env python
# -*- coding: utf-8 -*-

import os, Task, Options, Configure, Utils, misc
Configure.autoconfig = 1

# FIXME: Could use bzr python modules, too.
VERSION = os.popen("bzr version-info|grep revno|cut -d' ' -f2").read().strip()
APPNAME = 'vesper'

srcdir = '.'
blddir = '_build_'

source_dirs  = 'vesper/x86/unpacker vesper/x86/kserver'.split()
include_dirs = 'vesper/x86/unpacker vesper/x86/kserver vesper/x86/nucleus lib runtime'.split()
#archdep_includes = 'arch/ lib/oskit/oskit/'.split()

cflags = '-Wall -Wextra -Werror'.split()
cflags += ['-Os'] #FIXME: builddep FIXME: -O3 often causes screwups
cxxflags = cflags #+ ['-std=gnu++0x']
linkflags = '-nostdlib -nostartfiles -nodefaultlibs'.split() # -fno-builtin
flags = '-fno-stack-protector -fno-leading-underscore'.split()

def set_options(opt):
    # platform spec "arch-vendor-os", vendor can be omitted.
    # i686-exquance-metta
    # arm-metta
    opt.add_option("--arch", action="store", default="x86", help="Select architecture to build for.")

    #opt.add_subdir('vesper')

def configure(conf):
    # Configure for given platform
    # Configuration name is composed of architecture, cpu, release
    arch = Options.options.arch

    conf.check_tool('gcc g++ nasm misc') # FIXME: gcc detection per-config for x-compile?

    # Set up common environment variables
    conf.env.append_unique('CCFLAGS', cflags + flags)
    conf.env.append_unique('CXXFLAGS', cxxflags + flags)
    #conf.env.append_unique('CXXDEFINES', ['CONFIG_CPU_IA32_P4'])
    conf.env.append_unique('NASM_FLAGS', ['-f elf'])


    # TODO: Define categories for building:
    # * Base template environment. (ENV)
    # * Kernel and bootstrap, with no external dependencies. (KERNEL_ENV)
    # * Apps/servers running on target system, with possible kernel/boot deps. (APP_ENV)
    # * Tools running on host system, stl/boost ok. (TOOLS_ENV)
    # * Tests running on host system, using boost_unit_test_framework. (TEST_ENV)

    conf.env['variant'] = arch + '-release'

    # Template config for building
    conf.env.set_variant(conf.env['variant'])
    conf.set_env_name('ENV', conf.env)
    conf.setenv('ENV') # Activate the environment
    # Set arch-specific include paths
    #conf.env.append_unique('INCLUDE_ARCH', map(lambda d: d + arch, archdep_includes))

    # Generate config.h
    conf.define('ARCH', arch)
    conf.define('CONFIG_INLINING', 1)
    conf.define('HEAP_DEBUG', 1)
    conf.write_config_header('config.h')


    # Config for running tests
    conf.setenv('ENV') # Activate the environment
    env = conf.env.copy() # Clone environment
    env.set_variant(conf.env['variant'])
    conf.set_env_name('TEST_ENV', env)
    conf.setenv('TEST_ENV') # Activate the environment
    conf.env.append_unique('CXXFLAGS', ['-fexceptions'])
    conf.env.append_unique('CXXDEFINES', ['UNIT_TESTS'])
    conf.env['LIB_TEST'] = 'boost_unit_test_framework' # set uselib


    # Config for building kernel
    conf.setenv('ENV') # Activate the environment
    env = conf.env.copy() # Clone ENV
    env.set_variant(conf.env['variant']) # Output to the same variant
    conf.set_env_name('KERNEL_ENV', env)
    conf.setenv('KERNEL_ENV')
    conf.env.append_unique('CXXDEFINES', ['BOCHS_IO_HACKS']) # debugging hacks for bochs
    conf.env.append_unique('CXXFLAGS', '-fno-rtti -fno-exceptions -std=gnu++0x'.split())
    conf.env.append_unique('LINKFLAGS', ['--gc-sections'] + linkflags)

    #conf.add_subdir('vesper')


def build(bld):
    #bld.add_subdirs('vesper')

    mustl = bld.new_task_gen('cxx', 'staticlib')
    mustl.source = map(lambda f: 'runtime/mustl/' + f + '.cpp', 'cmemlink memblock memlink ualgobase ubitset unew ustring'.split())
    mustl.env = bld.env_of_name('KERNEL_ENV').copy()
    mustl.env.append_unique('CXXFLAGS', '-mmmx -msse -msse2'.split()) # FIXME: need configure options for this
    mustl.includes = include_dirs + ['runtime/mustl'] + mustl.env['INCLUDE_ARCH']
    mustl.target = 'mustl'

    loader = bld.new_task_gen('cxx', 'program')
    loader.source = 'vesper/x86/unpacker/loader.s vesper/x86/unpacker/unpacker.cpp vesper/x86/unpacker/multiboot.cpp vesper/x86/unpacker/page_fault_handler.cpp vesper/x86/unpacker/interrupt_service_routine.cpp vesper/x86/unpacker/interrupt_descriptor_table.cpp vesper/x86/unpacker/interrupt.s runtime/g++support.cpp runtime/memutils.cpp lib/default_console.cpp lib/panic.cpp lib/elf_parser.cpp lib/pmm.cpp lib/registers.s'
    loader.env = bld.env_of_name('KERNEL_ENV').copy()
    loader.env.append_unique('LINKFLAGS', ['-T', '../vesper/x86/unpacker/loader.ld', '-Wl,-Map,bootloader.map'])
    loader.includes = include_dirs + loader.env['INCLUDE_ARCH']
    loader.target = 'bootloader'

    initcp = bld.new_task_gen('cxx', 'program')
    initcp.source = 'vesper/x86/kserver/initcp.cpp vesper/x86/unpacker/multiboot.cpp lib/default_console.cpp runtime/g++support.cpp runtime/memutils.cpp lib/panic.cpp vesper/initfs/initfs.cpp lib/pmm.cpp lib/registers.s'
    initcp.env = bld.env_of_name('KERNEL_ENV').copy()
    initcp.env.append_unique('LINKFLAGS', ['-T', '../vesper/x86/kserver/initcp.ld', '-Wl,-Map,initcomp.map'])
    initcp.includes = include_dirs + ['vesper/initfs'] + initcp.env['INCLUDE_ARCH']
    initcp.target = 'initcomp'

    # kernel:
    # build vesper/kernel.*

    # initfs:
    # build several components, build mkinitfs, run mkinitfs to bundle built components
    mkinitfs = bld.new_task_gen('cxx', 'program')
    mkinitfs.source = 'vesper/initfs/mkinitfs.cpp'
    mkinitfs.env = bld.env_of_name('ENV').copy()
    mkinitfs.env.append_unique('CXXFLAGS', ['-fexceptions'])
    mkinitfs.env.append_unique('LINKFLAGS', '-lstdc++') # hm, why is this needed?
    mkinitfs.includes = include_dirs
    mkinitfs.target = 'mkinitfs'

def shutdown():
    if Options.commands['build']:
        Utils.exec_command("sh ./update_image.sh")
    #updater = bld.new_task_gen('command-output', outputs='floppy.img', argv=[vesper.target])
    #updater.command = 'sh update_image.sh'
    #updater.command_is_external = True
    #updater.dependencies = [vesper]

# kate: indent-width 4; replace-tabs on;
# vim: set et sw=4 ts=4 sts=4 cino=(4 :
