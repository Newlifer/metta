#!/usr/bin/env python
# -*- coding: utf-8 -*-

def build(bld):
    runtime = bld.new_task_gen('cxx', 'staticlib')
    runtime.source = '../../runtime/g++support.cpp ../../runtime/memutils.cpp ../../lib/multiboot.cpp ../../lib/panic.cpp ../../lib/elf_parser.cpp lib/console.cpp lib/default_console.cpp lib/bootinfo.cpp lib/pmm.cpp lib/registers.s lib/idt.cpp lib/debugger.cpp lib/page_directory_common.cpp'.split()
    runtime.env = bld.env_of_name('KERNEL_ENV').copy()
    runtime.includes = '. ../../lib ../../runtime lib'
    runtime.target = 'kernel_runtime'

    kickstart = bld.new_task_gen('cxx', 'program')
    kickstart.source = map(lambda f: 'kickstart/' + f, 'loader.s kickstart.cpp page_fault_handler.cpp isr.cpp interrupt.s initfs.cpp page_directory_kickstart.cpp c++boot.cpp merge_mmap.cpp'.split())# kickstart.lds
    kickstart.env = bld.env_of_name('KERNEL_ENV').copy()
    kickstart.env.append_unique('LINKFLAGS', ['-T', '../vesper/arch-x86/kickstart/kickstart.lds', '-Wl,-Map,kickstart.map'])
    kickstart.includes = '. ../../lib ../../runtime ../../runtime/ml lib kickstart nucleus'
    kickstart.target = 'kickstart.bin'
    kickstart.uselib_local = 'kernel_runtime'

    nucleus = bld.new_task_gen('cxx', 'program')
    nucleus.source = map(lambda f: 'nucleus/' + f, 'nucleus.cpp pd.cpp page_directory_nucleus.cpp memory/new.cpp memory/memory_manager.cpp memory/stack_page_allocator.cpp memory/heap.cpp'.split())# nucleus/nucleus.lds
    nucleus.env = bld.env_of_name('KERNEL_ENV').copy()
    nucleus.env.append_unique('LINKFLAGS', ['-T', '../vesper/arch-x86/nucleus/nucleus.lds', '-Wl,-Map,nucleus.map'])
    nucleus.includes = '. ../../lib ../../runtime lib nucleus'
    nucleus.target = 'nucleus.bin'
    nucleus.uselib_local = 'kernel_runtime'

    bld.add_subdirs('boot_components')

# kate: indent-width 4; replace-tabs on;
# vim: set et sw=4 ts=4 sts=4 cino=(4 :
