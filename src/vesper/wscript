#!/usr/bin/env python
# -*- coding: utf-8 -*-

def build(bld):
    runtime = bld.new_task_gen('cxx', 'staticlib')
    runtime.source = '../runtime/g++support.cpp ../runtime/memutils.cpp ../lib/default_console.cpp ../lib/panic.cpp ../lib/elf_parser.cpp ../lib/pmm.cpp ../lib/registers.s'
    runtime.env = bld.env_of_name('KERNEL_ENV').copy()
    runtime.includes = map(lambda f: '../'+f, runtime.env['INCLUDE_DIRS']) + runtime.env['INCLUDE_ARCH']
    runtime.target = 'kernel_runtime'

    loader = bld.new_task_gen('cxx', 'program')
    loader.source = map(lambda f: 'x86/unpacker/' + f, 'loader.s unpacker.cpp multiboot.cpp page_fault_handler.cpp interrupt_service_routine.cpp interrupt_descriptor_table.cpp interrupt.s'.split())
    loader.env = bld.env_of_name('KERNEL_ENV').copy()
    loader.env.append_unique('LINKFLAGS', ['-T', '../vesper/x86/unpacker/loader.ld', '-Wl,-Map,bootloader.map'])
    loader.includes = map(lambda f: '../'+f, loader.env['INCLUDE_DIRS']) + loader.env['INCLUDE_ARCH']
    loader.target = 'bootloader'
    loader.uselib_local = 'kernel_runtime'

    initcp = bld.new_task_gen('cxx', 'program')
    initcp.source = 'x86/kserver/initcp.cpp x86/unpacker/multiboot.cpp initfs/initfs.cpp'
    initcp.env = bld.env_of_name('KERNEL_ENV').copy()
    initcp.env.append_unique('LINKFLAGS', ['-T', '../vesper/x86/kserver/initcp.ld', '-Wl,-Map,initcomp.map'])
    initcp.includes = map(lambda f: '../'+f, initcp.env['INCLUDE_DIRS']) + ['initfs'] + initcp.env['INCLUDE_ARCH']
    initcp.target = 'initcomp'
    initcp.uselib_local = 'kernel_runtime'

    # kernel:
    # build kernel.*

    # initfs:
    # build several components, build mkinitfs, run mkinitfs to bundle built components
    mkinitfs = bld.new_task_gen('cxx', 'program')
    mkinitfs.source = 'initfs/mkinitfs.cpp'
    mkinitfs.env = bld.env_of_name('ENV').copy()
    mkinitfs.env.append_unique('CXXFLAGS', ['-fexceptions'])
    mkinitfs.env.append_unique('LINKFLAGS', '-lstdc++') # hm, why is this needed?
    mkinitfs.includes = map(lambda f: '../'+f, mkinitfs.env['INCLUDE_DIRS'])
    mkinitfs.target = 'mkinitfs'

    bld.new_task_gen(
        source = mkinitfs.target,
        target = 'initfs',
        rule = 'mkinitfs',
        cwd = bld.path.abspath()
    )

    bld.new_task_gen(
        source = 'bootloader initcomp initfs',
        target = 'floppy.img',
        rule = 'sh ./update_image.sh',
        cwd = bld.path.abspath()
    )

# kate: indent-width 4; replace-tabs on;
# vim: set et sw=4 ts=4 sts=4 cino=(4 :
