#
# Part of Metta OS. Check http://metta.exquance.com for latest version.
#
# Copyright 2007 - 2012, Stanislav Karchebnyy <berkus@exquance.com>
#
# Distributed under the Boost Software License, Version 1.0.
# (See file LICENSE_1_0.txt or a copy at http://www.boost.org/LICENSE_1_0.txt)
#
# Type system provides reflection on types available in the system.
#
#
# Much like Modula-3 types.
#
# Ordinal types:
#
# enum E { id_1, id_2, id_3 }
# set<enum> S;
# range id_1..id_2 R;
# int8
# int16
# int32
# int64
# octet
# card16
# card32
# card64
#
# Floating point types:
#
# float
# double
#
# Array types:
#
# type V[range][range]; # e.g. octet bytes[128][1..2];
#
# Record types:
#
# record { type field = default; type field = default } id;
#

# Maintains all information about the structure of abstract and concrete types in the system.
# 
# System typically contains a single instance of the "type_system" interface.
# This is a "naming_context" in which every type in the system is registered.  
# The context maps type names to "types.code"s.

# The arc-names registered in the "type_system" context are of the
# form
# 
#    "Foo"       `(for interface types), or`
#    "Foo.Bar"   `(for concrete types defined in the `"Foo"` interface).`
# 
# The "type_system"'s "get" method maps these type names to "types.any"s
# for the corresponding "types.code"s.

local interface type_system_v1 extends naming_context_v1
{

    # 
    # Representing type structures
    # 
    # Given a type code, the "info" procedure below can be used to
    # obtain a "types.any" whose value represents the structure of the
    # given type. Meddle's types are represented with values of the
    # following types.  Enumerations, reference types, records and choices are
    # all represented by instances of corresponding "naming_context" subtypes.
    # These are described elsewhere.

    type types.code alias;

    enum predefined { 
        Boolean,
        Card16,
        Card32,
        Card64,
        Int16,
        Int32,
        Int64,
        Float,
        Double,
        Octet,
        Char,
        Opaque,
        String 
    }

#    type card32 tc_array_index;
#    record tc_array { array_index n; alias tc; }
#     cardinal bit_set;//?
#     alias    ref;
#     choice&  choice;

    type enum_v1& enum_;
    type interface_v1& iref;
    type alias    sequence_;
    type alias    set_;
    type record_v1& record_;

    ## Raised if "code" is not a valid type code in this context.
    exception bad_code { alias code; }

    ## Raised when a "narrow" operation fails.
    exception incompatible {}

    # The "info" procedure maps a type code "tc" to information
    # about the corresponding type.
    # The "scope" result is a "naming_context" which represents the interface in which the type
    # is defined; for reference types, this is a distinguished interface
    # actually called "meta_interface" which notionally defines all interfaces,
    # including itself.  Finally, the "rep" result represents the type
    # as described above.

    info(alias tc, out types.any rep) 
        returns (interface_v1& scope) 
        raises (bad_code);

    ## "size" returns how may bytes an instance of the type occupies in
    ## memory. This is not as straightforward as it sounds, for instance
    ## the "Size" of a "STRING" is one word, and the "Size" of a
    ## "SEQUENCE" is the (fixed) size of the sequence data structure
    ## excluding its elements. It is provided for things like
    ## marshalling code and Monger.

    size(alias tc) returns (memory_v1.size s) raises (bad_code);

    ## "name" returns the name of the type.

    name(alias tc) returns (types.name name) raises (bad_code);

    ## "docstring" returns textual description of the type, field, record or method.
    ## @todo methods can not currently be looked up...?

    docstring(alias tc) returns (string doc) raises (bad_code);

    ## Return true if "sub" type is compatible with "super" type.
    ##
    ## The "is_type" procedure tells whether one type is compatible
    ## with another.  Types are compatible if they have the same type
    ## code (note that aliases are __not__ compatible), or "sub" is
    ## an interface type which directly or indirectly "extends"
    ## the interface type "super". "bad_code" is raised if one or other
    ## of the type codes does not exist.

    is_type(alias sub, alias super) returns (boolean result) raises (bad_code);

    ## "narrow" performs a runtime type check:
    ## If "is_type(a.type, tc)", then return "a.val"; otherwise raise
    ## "incompatible".

    narrow(types.any a, alias tc) returns (types.val v) raises (incompatible);

    # It may sometimes be convenient (in Monger for example) to
    # know the type of which a given type is an alias. 
    ## The "unalias" operation can be thought of as repeatedly reading the base type
    ## of a given alias, until the base type itself is not an
    ## alias. Given a type code, therefore, "unalias" will always return
    ## a type code of a type which is not an alias.
    # Return the ultimate base type of "tc". If "tc" refers to a type
    # which is not an alias, "base := a".

    unalias(alias tc) returns (alias base) raises (bad_code);
}
