#
# Part of Metta OS. Check http://metta.exquance.com for latest version.
#
# Copyright 2007 - 2011, Stanislav Karchebnyy <berkus@exquance.com>
#
# Distributed under the Boost Software License, Version 1.0.
# (See file LICENSE_1_0.txt or a copy at http://www.boost.org/LICENSE_1_0.txt)
#
# The "system_frame_allocator" interface provides in addition to the basic allocation & freeing of physical memory
# a mechanism whereby the system can create a new per-domain interface for physical memory allocation.
# It also allows for the extension of the set of physical regions managed by the frames allocator in the case that not
# all information was available at the time of its creation (i.e. at the time frames_mod.create was invoked).
# This typically occurs with the laying out of device address spaces.

local interface system_frame_allocator_v1 extends frame_allocator_v1
{
    # Create a new frames interface for the domain whose DCB
    # is at virtual address "dcb_va", physical address "dcb_pa".
    # The created interface should allow the client to allocate up
    # to "granted_frames" with some certainty, and may allow allocation
    # of up to "extra_frames" subject to later revocation.
    # An initial allocation of "init_alloc_frames" frames is requested.
    create_client(memory_v1.address dcb_va, memory_v1.address dcb_pa, card32 granted_frames, card32 extra_frames, card32 init_alloc_frames)
        returns (frame_allocator_v1 frames);

    # Add the set of physical frames described by "region" to the
    # set of frames managed by the frames allocator.
    add_frames(memory_v1.physmem_desc region)
        returns (boolean added);
}


# kate: indent-width 4; replace-tabs on;
# vim: set et sw=4 ts=4 sts=4 cino=(4 :
