# Type definitions for the various kinds of memory descriptors.

local interface memory_v1
{
    # Something went horribly wrong.
    exception failure {}

    # for 32 bits?
    type card32 address;
    type card32 size;

    # Memory may have various attributes; some of which apply only to either physical memory or virtual memory,
    # some may apply to both.
    # The currently defined set is:
    #   nailed     - a region of the virtual address space which is not pageable.
    #   non_memory - a region of the physical address space which has non-memory-like properties (e.g. IO space)
    #   no_cache   - a region of the physical address space which is not cached.
    #   dma        - a region of the physical address space to which or from where DMA may take place.
    #   read_only  - a piece of virt/phys memory which is now and always shall be read-only. E.g. ROM, NTSC stuff.

    enum { nailed, non_memory, no_cache, dma, read_only } attrs;
    set<attrs> attr_flags;

    # A region of physical memory is described by a physmem_desc

    record physmem_desc {
        address start_addr;
        size nframes;
        size frame_width;
        attr_flags attr;
    }

    # The type "physmem" is generally really going to point to the start of a (variable) length array of
    # physmem_desc's. The array will be accompanied by a size param, or be terminated by a 'zero' element of some sort.

#     type physmem_desc& physmem; # invalid!
    type physmem_desc physmem;

    # A region of the virtual address space is described by a virtmem_desc.

    record virtmem_desc {
        address start_addr;
        size npages;
        size page_width;
        attrs attr;
    }

    # A set of regions is held in a variable of type virtmem.
    # As for physmem, the type really represents an array in general.

#     type virtmem_desc& virtmem; # invalid!
    type virtmem_desc virtmem;

    # A particular contiguous mapping from virtual address "virt" to physical address "phys".
    # The mapping extends over "npages" pages each of width "page_width". The "mode" represents some
    # machine-specific information (such as protection, buffering or caching info).

    record mapping {
        address virt;
        address phys;
        size    nframes;
        size    frame_width;
        card32  mode;
    }

    # A set of mappings is held in a variable of type map.
    # As for physmem and virtmem, the type generally represents an array.
#     type mapping& map; # invalid!
    type mapping map;

    # Various sorts of faults may occur when a domain accesses (or
    # attempts to access) memory. The above is intended to be a
    # comprehensive list; it is not expected that every type of
    # fault will be present on every architecture.
    # The meanings of the various types are as follows:
    # \begin{description}
    #
    #  \item{TNV} : the translation of a VA to a PA failed because there
    #               is no valid information about the mapping.
    #               Generally this occurs when a bogus VA is used.
    #
    #  \item{UNA} : an unaligned access was attempted. This may be
    #               simply a bad VA, or may be a true unaligned attempt.
    #
    #  \item{ACV} : an attempt to access some VA failed due to
    #               insufficient privilige (i.e. a protection fault).
    #
    # \item{INST} : an illegal (or just bogus) instruction was attempted
    #               at a particular address.
    #
    #  \item{FOE} : an I-stream fetch was attempted from a non-executable
    #               page.
    #
    #  \item{FOW} : a write access was attempted to a page marked fault
    #               on write. This may be used to impl copy on write
    #               should we decide we need it.
    #
    #  \item{FOR} : a read access was attempted on a page marked as
    #               fault on read. This may be used to collect access
    #               pattern statistics, or as a hook for persistance etc.
    #
    # \item{PAGE} : the page to which an access was attempted is not
    #               resident in memory.
    #
    #  \item{BPT} : a (probably) user-initiated fault.
    #
    # \end{description}
    #
    # The priorities of the faults are as listed; i.e. a domain will
    # not take a page fault on a page to which it has no access, nor
    # will it be able to take a fault on write on an unaligned address.

    enum {
        translation_not_valid,
        unaligned_access,
        access_violation,
        instruction_fault,
        fault_on_exec,
        fault_on_write,
        fault_on_read,
        page_faut,
        breakpoint
    } fault;
}
