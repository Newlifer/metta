#
# Part of Metta OS. Check https://atta-metta.net for latest version.
#
# Copyright 2007 - 2017, Stanislav Karchebnyy <berkus@atta-metta.net>
#
# Distributed under the Boost Software License, Version 1.0.
# (See file LICENSE_1_0.txt or a copy at http://www.boost.org/LICENSE_1_0.txt)
#
## Vector via which the real processor is given to a VP.
##
## A domain differs from the normal concept of a user process
## in the way in which the processor is presented to it.
## The domain's user-level scheduler can be explicitly informed
## when the processor is given to the domain by invocations on
## its activation vector, an "activation_v1&" associated
## with the domain's virtual processor.

local interface activation_v1
{
    # A domain may be activated because
    #
    # * it was preempted and has now been rescheduled,
    # * it yielded or ran out of contracted CPU time and has now been given a fresh allocation,
    # * it ran out of contracted CPU time and has now been allocated some extra time, or
    # * events have been delivered to it.
    # * it has been reactivated by itself.
    #
    # In the future, other activation reasons such as page faults
    # and other asynchronous events may be added.  The trade-offs
    # between this mechanism and the use of well-known "Channel.RX"s
    # will be investigated.
    #
    enum reason { preempted, allocated, extra, event, reactivated }

    # A domain is activated by disabling activations, then invoking
    # "go" on its vcpu's activation vector with the appropriate value
    # of "activation_reason". "go" executes on a small, permanently resident activation
    # stack associated with the vcpu.
    go(vcpu_v1& vcpu, reason activation_reason) never returns;
}
