TODO: add oneway modifier for asynchronous exec? check zeroc notes for downsides if any.
TODO: needs declaration might be not needed, since we will use fully-qualified module ids and its possible to derive
needs module names from there...
TODO: add 'unbound' method specifier (similar to 'static' methods in c++) - not bound to a closure

/*!
 * BNF of the grammar.
 *
 * module ::= full_interface_decl
 * full_interface_decl ::= local_interface_decl | final_interface_decl | interface_decl
 * local_interface_decl ::= 'local' (final_interface_decl | interface_decl)
 * final_interface_decl ::= 'final' (local_interface_decl | interface_decl)
 * interface_decl ::= 'interface' id ['extends' id] '{' interface_body '}'
 * interface_body ::= (exception | typealias | full_method_decl)*
 * exception ::= 'exception' id '{' exception_body '}'
 * exception_body ::= field_list
 * field_list ::= (var_decl ';')*
 * typealias ::= sequencedef | recorddef | setdef | rangedef | typedef
 * sequencedef ::= 'sequence' '<' typealias '>' id ';'
 * recorddef ::= 'record' id '{' field_list '}'
 * setdef ::= 'set' id
 * rangedef ::= 'range' id
 * typedef ::= 'type' id id ';'
 * arraydef ::= TODO
 * full_method_decl ::= idempotent_method_decl | method_decl
 * idempotent_method_decl ::= 'idempotent' method_decl
 * method_decl ::= id argument_list ['returns' argument_list|'never' 'returns'] ['raises' id_list] ';'
 * argument_list ::= '(' [ var_decl (',' var_decl)* ] ')'
 * argument ::= ['in'|'out'|'inout'] var_decl
 * id_list ::= '(' [ id (',' id)* ] ')'
 * var_decl ::= typeid [reference] id
 * reference ::= '&'
 * typeid ::= id | builtin_type
 * id ::= [A-Za-z]([A-Za-z0-9_.])*
 * builtin_type ::= 'int8' | 'int16' | 'int32' | 'int64' | 'octet' | 'card16' | 'card32' | 'card64' | 'float' | 'double' | 'boolean'
 */

This syntax is supposed to support "type id, id, id" case, probably not use it for simplicity of parser?

arg_spec = ["in"|"out"|"inout"] typeID , ID , { "," , ID } ;
args = arg_spec , { "," , arg_spec } ;
return_spec = "returns" , "(" , {args} , ")" | "never" , "returns" ;
